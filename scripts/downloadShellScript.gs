/**
 * downloadShellScript.gs
 *
 * Builds a categorized and timestamped WP-CLI batch shell script from Google Sheets data.
 *
 * Dynamically detects columns by header name and avoids hardcoded indexes.
 *
 * Required Columns:
 *   - STEP 1: Remove unwanted posts (301/410)
 *   - STEP 2: Change Post URL (optional)
 *   - STEP 3: Search/Replace URL
 *   - STEP 4: URL Length Sort (for sorting only)
 * 
 * Groups WP-CLI commands into:
 *   - STEP 1: Post Deletions (`wp post delete`)
 *   - STEP 2: Permalink Updates (`wp post update`)
 *   - STEP 3: Search & Replace (`wp search-replace`)
 *
 * Each command is wrapped in `run_or_log_fail` to log failed executions to `failed.log`.
 * A log file is created for each run and output is directed to both console and log.
 * Final shell script is created in the user's Google Drive.
 *
 *
 * Author: Eric Rasch
 *   GitHub: https://github.com/ericrasch/wp-cli-sheet-automation
 * Date Created: 2025-04-18
 * Last Modified: 2025-04-22
 * Version: 1.0
 *
 */

function downloadShellScript() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('YourSheetName'); // Replace with your sheet name
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const lastRow = sheet.getLastRow();

  // Helper to get column index by name
  const getColIndex = name => {
    const idx = headers.indexOf(name);
    if (idx === -1) throw new Error("Column not found: " + name);
    return idx;
  };

  const deleteCol = getColIndex("STEP 1: Remove unwanted posts (301/410)");
  let updateCol = -1;
  try {
    updateCol = getColIndex("STEP 2: Change Post URL");
  } catch (err) {
    Logger.log("‚ÑπÔ∏è Optional column missing: STEP 2: Change Post URL ‚Äî skipping.");
  }
  const replaceCol = getColIndex("STEP 3: Search/Replace URL");
  const lengthCol = getColIndex("STEP 4: URL Length Sort");

  // Sort rows by URL length (descending), adjusting for 1-based index
  sheet.getRange(2, 1, lastRow - 1, headers.length)
       .sort({ column: lengthCol + 1, ascending: false });

  const allRows = sheet.getRange(2, 1, lastRow - 1, headers.length).getValues();
  const data = allRows.map(row => [
    row[deleteCol],
    updateCol >= 0 ? row[updateCol] : "",
    row[replaceCol]
  ]);

  const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyyMMdd_HHmmss");
  const filename = `wp_cli_batch_${timestamp}.sh`;

  const output = [
    '################################################################################',
    '# Script Name: wp_cli_batch_<timestamp>.sh',
    '#',
    '# Description:',
    '#   This script executes a batch of WP-CLI commands grouped by step.',
    '#   It logs all output to a timestamped log file and records failed commands',
    '#   to `failed.log` for later review.',
    '#',
    '# Pre-Execution Warnings:',
    '#   - ‚ö†Ô∏è Ensure you have a full database backup before running.',
    '#     Suggested: wp db export backup_$(date +%Y%m%d_%H%M%S).sql',
    '#',
    '#   - ‚ö†Ô∏è Confirm you\'re operating in the correct environment (production/staging).',
    '#',
    '#   - ‚ö†Ô∏è Verify all commands were reviewed and tested if applicable.',
    '#',
    '# Live Monitoring:',
    '#   - Use: tail -f wp_cli_log_<timestamp>.log',
    '#     to watch output in real time from another terminal window.',
    '#',
    '# Cancel Execution:',
    '#   - Use: Ctrl+C to terminate this script while it\'s running.',
    '#   - Use: ps aux | grep wp | grep sh to find and kill long-running processes.',
    '#',
    '# Usage:',
    '#   chmod +x wp_cli_batch_<timestamp>.sh',
    '#   ./wp_cli_batch_<timestamp>.sh',
    '#',
    '# Generated by: Google Apps Script via downloadShellScript()',
    '################################################################################',
    '',
    '#!/bin/bash',
    '',
    'timestamp=$(date +"%Y%m%d_%H%M%S")',
    'logfile="wp_cli_log_$timestamp.log"',
    'exec > >(tee -i "$logfile")',
    'exec 2>&1',
    '',
    'echo "=== Starting WP-CLI Batch Processing ==="',
    '',
    'run_or_log_fail() {',
    '  "$@" || echo "‚ùå Failed: $*" >> failed.log',
    '}',
    ''
  ];

  const deletes = [];
  const updates = [];
  const replaces = [];

  data.forEach(row => {
    const [deleteCmd, updateCmd, replaceCmd] = row;

    if (deleteCmd && deleteCmd !== "MISSING" && deleteCmd !== "#VALUE!") {
      deletes.push("run_or_log_fail " + deleteCmd);
    }
    if (updateCmd && updateCmd !== "MISSING" && updateCmd !== "#VALUE!") {
      updates.push("echo \"üü¢ running " + updateCmd + " ...\"");
    updates.push("run_or_log_fail " + updateCmd);
    }
    if (replaceCmd && replaceCmd !== "MISSING" && replaceCmd !== "#VALUE!") {
      replaces.push("echo \"üü¢ running " + replaceCmd + " ...\"");
    replaces.push("run_or_log_fail " + replaceCmd);
    }
  });

  if (deletes.length) {
    output.push('echo "=== STEP 1: Deleting Unwanted Posts ==="', ...deletes, "");
  }
  if (updates.length) {
    output.push('echo "=== STEP 2: Updating Custom Permalinks ==="', ...updates, "");
  }
  if (replaces.length) {
    output.push('echo "=== STEP 3: Running Search & Replace ==="', ...replaces, "");
  }

  const blob = Utilities.newBlob(output.join("\n"), 'text/x-shellscript', filename);
  const file = DriveApp.createFile(blob);
  Logger.log("‚úÖ Download your script here: " + file.getUrl());
}
